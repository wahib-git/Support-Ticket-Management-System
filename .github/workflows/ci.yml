name: Backend CI

on:
  workflow_dispatch:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run Linter
  #       run: npm run lint

  # test:
  #  runs-on: ubuntu-latest
  #   needs: lint
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5
  #       with:
  #         fetch-depth: 0  
        

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

      # - name: Run Unit Tests
      #   env:
      #     MONGODB_URI_TEST: ${{ secrets.MONGODB_URI_TEST }}
      #   run: |
      #     npm test
      #     npm run test:integration
      #     npm run test:functional
      
    # sonarcloud:
    #   runs-on: ubuntu-latest  
    #   steps:  
    #     - name: Checkout code
    #       uses: actions/checkout@v5
    #       with:
    #         fetch-depth: 0  

    #     - name: SonarCloud Scan
    #       uses: SonarSource/sonarqube-scan-action@v5.3.0
    #       env:
    #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
    #         GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
    #       with:
    #         args: >
    #           -Dsonar.organization=wahib-git
    #           -Dsonar.projectKey=Support-Ticket-Management-System
  # GitleaksScan:
  #   name: gitleaks
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5
  #       with:
  #         fetch-depth: 0
  #     - uses: gitleaks/gitleaks-action@v2
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

  # TrivyScan:
  #   name: Trivy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5
  #       with:
  #         fetch-depth: 0
  #     - name: Run Trivy vulnerability scanner in repo mode
  #       uses: aquasecurity/trivy-action@0.32.0
  #       with:
  #         scan-type: 'fs'
  #         severity: 'CRITICAL,HIGH'

    # OWASPDependencyCheck:
    #   name: OWASP Dependency Check
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Checkout code
    #       uses: actions/checkout@v5
    #       with:
    #         fetch-depth: 0 

    #     - name: Setup Node.js
    #       uses: actions/setup-node@v4
    #       with:
    #         node-version: 20
    #         cache: 'npm'

    #     - name: Install dependencies
    #       run: npm ci

    #     - uses: dependency-check/Dependency-Check_Action@main
    #       with:
    #         project: "Support-Ticket-Management-System"
    #         path: "."
    #         format: "HTML"
    #         out: "reports"
    #     - name: Upload Dependency-Check report
    #       uses: actions/upload-artifact@v4
    #       with:
    #         name: dependency-check-report
    #         path: reports/dependency-check-report.html


  docker-build-and-scan:
    name: Build, Scan & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      #  Récupération du code
      - name: Checkout repository
        uses: actions/checkout@v5

      #  Build de l’image
      - name: Build Docker image
        run: |
          IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/backend:${{ github.sha }}
          docker build -t $IMAGE .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      #  Scan de l’image avec Trivy
      - name: Trivy scan Docker image
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ${{ env.IMAGE }}
          severity: CRITICAL,HIGH
          format: 'table'
          ignore-unfixed: true

      #  Connexion Docker Hub (seulement si scan OK)
      - name: Log in to Docker Hub
        if: success()
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      #  Push sur Docker Hub
      - name: Push Docker image
        if: success()
        run: docker push ${{ env.IMAGE }}