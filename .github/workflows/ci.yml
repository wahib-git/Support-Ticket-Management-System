name: Backend CI

on:
  workflow_dispatch:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]

jobs:

  Gitleaks-Scan:
    name: Gitleaks scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}


  lint:
    name: Lint Code Base (ESLint)
    runs-on: ubuntu-latest
    needs: Gitleaks-Scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

  tests:
    name: Run Unit, Integration & functional Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 1  
        

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Unit Tests
        env:
          MONGODB_URI_TEST: ${{ secrets.MONGODB_URI_TEST }}
        run: |
          npm test 
          npm run test:integration 
          npm run test:functional

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jest-coverage-report
          path: coverage/
          retention-days: 1      
          
  sonarcloud-scan:
    name: SonarCloud Scan
    needs: tests
    runs-on: ubuntu-latest  
    steps:  
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: jest-coverage-report
          path: coverage/

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.3.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          args: 
            -Dsonar.organization=wahib-git
            -Dsonar.projectKey=Support-Ticket-Management-System
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info 

  # Trivy-Scan:
  #   name: Trivy file system Scan
  #   needs: sonarcloud-scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5
  #       with:
  #         fetch-depth: 0
  #     - name: Run Trivy vulnerability scanner in repo mode
  #       uses: aquasecurity/trivy-action@0.32.0
  #       with:
  #         scan-type: 'fs'
  #         severity: 'CRITICAL,HIGH'

  # OWASP-Dependency-Check:
  #   name: OWASP Dependency Check
  #   needs: Trivy-Scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5
  #       with:
  #         fetch-depth: 0 

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 22
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - uses: dependency-check/Dependency-Check_Action@1.1.0
  #       with:
  #         project: "Support-Ticket-Management-System"
  #         path: "."
  #         format: "HTML"

  #     - name: Upload Dependency-Check report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dependency-check-report
  #         path: reports/dependency-check-report.html


  docker-build-and-scan:
    name: Build, Scan(trivy) & Push Docker Image
    needs: sonarcloud-scan
 #  needs: OWASP-Dependency-Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Build Docker image
        run: |
          IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/backend:${{ github.sha }}
          docker build -t $IMAGE .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Trivy scan Docker image
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ${{ env.IMAGE }}
          severity: CRITICAL,HIGH
          format: 'table'
          ignore-unfixed: true

      - name: Log in to Docker Hub
        if: success()
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Push Docker image
        if: success()
        run: docker push ${{ env.IMAGE }}