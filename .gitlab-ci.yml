stages:
  - build
  - test
  - deploy

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

before_script:
  - echo "Pipeline started..."

build-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $CI_PROJECT_NAME .
    - echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
    - docker tag $CI_PROJECT_NAME $DOCKERHUB_USERNAME/$CI_PROJECT_NAME:latest
    - docker push $DOCKERHUB_USERNAME/$CI_PROJECT_NAME:latest
  only:
    - main

unit-test:
  stage: test
  image: node:20
  script:
    - export NODE_ENV=test
    - npm install
    - npm run test

integration-test:
  stage: test
  image: node:20
  script:
    - export NODE_ENV=test
    - npm install
    - npm run test:integration

functional-test:
  stage: test
  image: node:20
  script:
    - export NODE_ENV=test
    - npm install
    - npm run test:functional

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
    - docker pull $DOCKERHUB_USERNAME/$CI_PROJECT_NAME:latest
    # Ici tu peux ajouter un script pour d√©ployer sur un serveur si tu en as un
  only:
    - main